const AppError = require("../utils/appError");

// Handle MongoDB duplicate key error
const handleDuplicateFieldsDB = (err) => {
  const value = err.keyValue;
  const message = `Duplicate field value: ${JSON.stringify(
    value
  )}. Please use another value!`;
  return new AppError(message, 400);
};

// Handle MongoDB validation errors
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors || {}).map((el) => el.message);
  const message = `Invalid input data. ${errors.join(". ")}`;
  return new AppError(message, 400);
};

const handleTimeoutError = () =>
  new AppError(
    "Your operation couldn't be completed. Please try again later.",
    500
  );

// Handle MongoDB cast errors (wrong data types in queries)
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

const handleJWTError = () => {
  const message = "Invalid token. Please log in again";
  return new AppError(message, 401);
};

const handleJWTExpiredError = () =>
  new AppError("Your token has expired! Please log in again.", 401);

const sendErrDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    message: err.message,
    error: err,
    stack: err.stack,
  });
};

const sendErrProd = (err, res) => {
  // Operational, errors generated by user interactions
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  } else {
    console.log("Error ðŸ’£", err);

    res
      .status(err.statusCode)
      .json({ status: err.status, message: "Something went very wrong" });
  }
};

function globalErrorHandler(err, _req, res, _next) {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";

  console.log(err);
  if (process.env.NODE_ENV === "development") {
    sendErrDev(err, res);
  } else if (process.env.NODE_ENV === "production") {
    let error = Object.create(
      Object.getPrototypeOf(err),
      Object.getOwnPropertyDescriptors(err)
    );

    // Handle specific MongoDB errors
    if (error.name === "CastError") error = handleCastErrorDB(error);

    if (error.code === 11000) error = handleDuplicateFieldsDB(error);

    if (error.name === "ValidationError")
      error = handleValidationErrorDB(error);

    if (error.name === "JsonWebTokenError") error = handleJWTError();

    if (err.name === "TokenExpiredError") error = handleJWTExpiredError();

    if (error.name === "MongooseError") error = handleTimeoutError();

    sendErrProd(error, res);
  }
}

module.exports = globalErrorHandler;
